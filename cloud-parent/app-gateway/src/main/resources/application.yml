
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:7000/eureka/ # 治理客户端服务域

spring:
  application:
    name: app-gateway
  profiles:
      active: 8200
  #限流（限流-令牌桶RequestRateLimiter）使用
  redis:
    host: localhost
    port: 6379
    database: 0
  cloud:
    gateway: #springcloudgateway配置
      routes: #路由（数组）
        # 路由1，产品微服务别名
        - id: serviceProduce
          uri: lb://service-product #微服务名称
          predicates: #断言（数组）
          - Path=/productRestController/** #需满足此请求路径
          - Method=GET #需满足GET请求方法
          - Before=2030-10-25T21:28:47.789+08:00 # 需要Before的时间前才能执行
          - After=2020-10-25T21:28:47.789+08:00 # 需要After的时间后才能执行
          filters: #filters带有s，丢了就无效
          - name: RequestRateLimiter #限流-令牌桶，使用redis+Lua实现
            args:
              key-resolver: '#{@pathKeyResolver}' #使用SpEL从SpringIoC容器中获取对象
              #key-resolver: '#{@ipKeyResolver}'
              #key-resolver: '#{@userIdKeyResolver}'
              redis-rate-limiter.replenishRate: 1 #令牌同每秒填充平均速率
              redis-rate-limiter.burstCapacity: 2 #令牌桶的上限

        # 路由2，用户微服务别名
        - id: serviceUser
          uri: lb://service-user
          predicates:
          - Path=/userRestController/**
    #springcloud stream 配置
    stream:
      bindings:
        myoutput: #消息输出渠道ID=myoutput
          destination: myoutput-stream-default #发送到此exchange(交换机)
          producer: #消息分区：消息生产者
            partition-key-expression: payload  #消息分区：分区关键字，可以根据实际的输出消息规则来配置SpEL来生成合适的分区键
            partition-count: 2  #消息分区：分区大小
      binders:
        defaultRabbit:
          type: rabbit

  # 链路追踪zipkin配置
  zipkin:
    #base-url: http://127.0.0.1:9411/ #zipkin server的请求地址
    sender:
      #type: web #请求方式,默认以http的方式向zipkin server发送追踪数据，发送到base-url
      type: rabbit #以rabbit的方式向发送追踪数据
  sleuth: #链路追踪sleuth配置
    sampler:
      probability: 1.0 #采样的百分比，默认1全部采用

  # RabbitMQ连接配置
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    listener: # 这里配置了重试策略
      direct:
        retry:
          enabled: true
      simple:
        retry:
          enabled: true

# 日志级别
logging:
  level:
    root: INFO
    org.springframework.web.servlet.DispatcherServlet: DEBUG
    org.springframework.cloud.sleuth: DEBUG


---
spring:
  profiles: 8200
server:
  port: 8200
---
spring:
  profiles: 8201
server:
  port: 8201
---
spring:
  profiles: 8202
server:
  port: 8202